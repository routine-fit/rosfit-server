generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  firebaseUid        String              @unique
  name               String
  lastName           String
  birthDate          DateTime
  gender             Gender
  pushNotification   Boolean             @default(false)
  growthRecords      GrowthRecord[]
  routines           Routine[]
  exercises          Exercise[]
  trainingPreference TrainingPreference?
  ScheduleRoutine    ScheduleRoutine[]
}

model GrowthRecord {
  id            String   @id @default(uuid())
  weight        Float
  weightMeasure String   @default("kg")
  height        Float
  heightMeasure String   @default("m")
  createdAt     DateTime @default(now())
  userId        String
  user          UserInfo @relation(fields: [userId], references: [firebaseUid])
}

model TrainingPreference {
  id        String       @id @default(uuid())
  type      TrainingType
  time      Int
  intensity Intensity
  userId    String       @unique
  user      UserInfo     @relation(fields: [userId], references: [firebaseUid])
}

model ExerciseLink {
  id         String   @id @default(uuid())
  url        String
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String            @id @default(uuid())
  name        String
  muscleGroup MuscleGroup
  links       ExerciseLink[]
  userId      String
  user        UserInfo          @relation(fields: [userId], references: [firebaseUid])
  routines    RoutineExercise[]
}

model Routine {
  id              String            @id @default(uuid())
  name            String
  type            String
  userId          String
  user            UserInfo          @relation(fields: [userId], references: [firebaseUid])
  exercises       RoutineExercise[]
  ScheduleRoutine ScheduleRoutine[]
}

enum MuscleGroup {
  ABDOMINAL
  BICEPS
  DELTOID
  ERECTOR_SPINAE
  LATISSIMUS_DORSI
  PECTORAL
  TRAPEZIUS
  TRICEPS
}

enum Gender {
  MALE
  FEMALE
  BINARY
  PREFER_NOT_SPECIFY
}

enum TrainingType {
  STRENGTH
  CARDIO
  FUNCTIONAL
  FLEXIBILITY
  ENDURANCE
  SPORTS_SPECIFIC
  AGILITY
  BODYWEIGHT
}

// TO-DO: Review for future
enum Intensity {
  HIGH
  MEDIUM
  LOW
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model RoutineExercise {
  id           String                  @id @default(uuid())
  routineId    String
  routine      Routine                 @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId   String
  exercise     Exercise                @relation(fields: [exerciseId], references: [id], onUpdate: Cascade)
  repetitions  Int
  restTimeSecs Int                     @default(30)
  series       SeriesRoutineExercise[]
  order        Int

  @@unique([routineId, exerciseId])
}

model SeriesRoutineExercise {
  id                String          @id @default(uuid())
  order             Int
  weight            Float
  weightMeasure     String          @default("kg")
  routineExerciseId String
  routineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([order, routineExerciseId])
}

model ScheduleRoutine {
  id        String   @id @default(uuid())
  routineId String
  routine   Routine  @relation(fields: [routineId], references: [id])
  userId    String
  user      UserInfo @relation(fields: [userId], references: [firebaseUid])
  day       Day
  isActive  Boolean
  createdAt DateTime @default(now())
}
