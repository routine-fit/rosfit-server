generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserInfo {
  firebaseUid        String              @id @unique
  name               String
  lastName           String
  birthDate          DateTime
  gender             Gender
  pushNotification   Boolean             @default(false)
  growthRecords      GrowthRecord[]
  routines           Routine[]
  exercises          Exercise[]
  trainingPreference TrainingPreference?
  scheduleRoutines   ScheduleRoutine[]
  summaryRoutines    SummaryRoutine[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
}

model GrowthRecord {
  id            String   @id @default(uuid())
  weight        Float
  weightMeasure String   @default("kg")
  height        Float
  heightMeasure String   @default("m")
  createdAt     DateTime @default(now())
  userId        String
  user          UserInfo @relation(fields: [userId], references: [firebaseUid], onDelete: Cascade)

  @@index([userId])
}

model TrainingPreference {
  id        String       @id @default(uuid())
  type      TrainingType
  time      Int
  intensity Intensity
  userId    String       @unique
  user      UserInfo     @relation(fields: [userId], references: [firebaseUid], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model ExerciseLink {
  id         String   @id @default(uuid())
  url        String
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
}

model Exercise {
  id          String            @id @default(uuid())
  name        String
  muscleGroup MuscleGroup
  links       ExerciseLink[]
  userId      String
  user        UserInfo          @relation(fields: [userId], references: [firebaseUid], onDelete: Cascade)
  routines    RoutineExercise[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt

  @@index([userId])
}

model Routine {
  id               String            @id @default(uuid())
  name             String
  type             String
  userId           String
  user             UserInfo          @relation(fields: [userId], references: [firebaseUid], onDelete: Cascade)
  exercises        RoutineExercise[]
  scheduleRoutines ScheduleRoutine[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?         @updatedAt

  @@index([userId])
}

model RoutineExercise {
  id                      String                   @id @default(uuid())
  routineId               String
  routine                 Routine                  @relation(fields: [routineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exerciseId              String
  exercise                Exercise                 @relation(fields: [exerciseId], references: [id], onUpdate: Cascade)
  repetitions             Int
  restTimeSecs            Int                      @default(30)
  series                  SerieRoutineExercise[]
  order                   Int
  summaryRoutineExercises SummaryRoutineExercise[]

  @@unique([routineId, exerciseId])
  @@index([routineId, exerciseId])
}

model SerieRoutineExercise {
  id                String          @id @default(uuid())
  order             Int
  weight            Float
  weightMeasure     String          @default("kg")
  routineExerciseId String
  routineExercise   RoutineExercise @relation(fields: [routineExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([order, routineExerciseId])
}

model ScheduleRoutine {
  id              String           @id @default(uuid())
  routineId       String
  routine         Routine          @relation(fields: [routineId], references: [id], onDelete: Cascade)
  userId          String
  user            UserInfo         @relation(fields: [userId], references: [firebaseUid], onDelete: Cascade)
  day             Day
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  summaryRoutines SummaryRoutine[]

  @@index([routineId, userId])
}

model SummaryRoutine {
  id                String                   @id @default(uuid())
  startedAt         DateTime                 @default(now())
  finishedAt        DateTime?
  durationInMinutes Int?
  userId            String
  user              UserInfo                 @relation(fields: [userId], references: [firebaseUid], onDelete: Cascade)
  scheduleRoutineId String
  scheduleRoutine   ScheduleRoutine          @relation(fields: [scheduleRoutineId], references: [id], onDelete: Cascade)
  summaryExercises  SummaryRoutineExercise[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId, scheduleRoutineId])
}

model SummaryRoutineExercise {
  id                String                        @id @default(uuid())
  routineExerciseId String
  routineExercise   RoutineExercise               @relation(fields: [routineExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  summaryRoutineId  String
  summaryRoutine    SummaryRoutine                @relation(fields: [summaryRoutineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  summarySeries     SummaryRoutineExerciseSerie[]
  repetitions       Int
  restTimeSecs      Int

  @@index([summaryRoutineId, routineExerciseId])
}

model SummaryRoutineExerciseSerie {
  id                       String                 @id @default(uuid())
  summaryRoutineExerciseId String
  summaryRoutineExercise   SummaryRoutineExercise @relation(fields: [summaryRoutineExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  weight                   Float
  weightMeasure            String                 @default("kg")
}

enum MuscleGroup {
  ABDOMINAL
  BICEPS
  DELTOID
  ERECTOR_SPINAE
  LATISSIMUS_DORSI
  PECTORAL
  TRAPEZIUS
  TRICEPS
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_SPECIFY
}

enum TrainingType {
  STRENGTH
  CARDIO
  FUNCTIONAL
  FLEXIBILITY
  ENDURANCE
  SPORTS_SPECIFIC
  AGILITY
  BODYWEIGHT
}

enum Intensity {
  HIGH
  MEDIUM
  LOW
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
